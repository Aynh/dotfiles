#!/bin/env python

import os
import sys

WALLPAPER_DIR = os.path.expanduser("~/.wallpaper")

ZEROCHAN_FEED_URL_TMPL = "https://www.zerochan.net/{}?json&s=fav&t=2&d=landscape&l=8"
ZEROCHAN_SFW_TAGS = (
    "Arknights",
    "Honkai Star Rail",
    "Reverse: 1999",
    "Genshin Impact",
    "Girls Frontline",
    "Touhou",
)
ZEROCHAN_NSFW_TAGS = (
    "Yuri",
    "Azur Lane",
    "Blue Archive",
)


async def update_wallpaper():
    import asyncio
    import itertools
    import json
    import urllib.parse

    import httpx
    from tqdm.asyncio import tqdm

    request_counter = 0
    async def wait_for_every_60th_requests(_request):
        nonlocal request_counter
        request_counter += 1
        await asyncio.sleep((request_counter // 60) * 60)

    async def raise_on_4xx_5xx(response):
        response.raise_for_status()

    client = httpx.AsyncClient(
        headers={"user-agent": f"{os.path.basename(__file__)} - yet-another"},
        follow_redirects=True,
        event_hooks={"request": [wait_for_every_60th_requests],"response": [raise_on_4xx_5xx]},
    )

    semaphore = asyncio.Semaphore(4)

    def with_semaphore(fn):
        async def wrapper(*args):
            async with semaphore:
                return await fn(*args)

        return wrapper

    @with_semaphore
    async def get_zerochan_feed(tag):
        url = ZEROCHAN_FEED_URL_TMPL.format(tag.replace(" ", "+"))
        response = (await client.get(url)).json()

        try:
            return response["items"]
        except KeyError:
            return []

    feed_items = itertools.chain.from_iterable(
        await tqdm.gather(
            *[
                get_zerochan_feed(tag)
                for tag in (*ZEROCHAN_SFW_TAGS, *ZEROCHAN_NSFW_TAGS)
            ],
            desc="fetching image feeds",
            disable=None,
            leave=False
        )
    )

    @with_semaphore
    async def get_full_image_url(image_id):
        response = await client.get(f"https://www.zerochan.net/{image_id}?json")
        # workaround for json value that ends with a backslash
        response = json.loads(response.text.replace('\\"', '"'))

        return response

    image_urls = await tqdm.gather(
        *[get_full_image_url(item["id"]) for item in feed_items],
        desc="fetching images data",
        disable=None,
        leave=False
    )

    @with_semaphore
    async def download_image(item):
        url: str = item["full"]

        if url.endswith(".gif"):
            return  # feh is unable to use gif as wallpaper

        filename = (
            urllib.parse.unquote(url.split("/")[-1]).replace("(", "").replace(")", "")
        )

        nsfw = (
            any(tag in item["tags"] for tag in ZEROCHAN_NSFW_TAGS)
            or item["primary"] in ZEROCHAN_NSFW_TAGS
        )

        image_path = os.path.join(WALLPAPER_DIR, "NSFW" if nsfw else "SFW", filename)

        if os.path.exists(image_path):
            return  # don't redownload existing file

        os.makedirs(os.path.dirname(image_path), exist_ok=True)
        async with client.stream("GET", url) as response:
            with tqdm(
                desc=filename,
                disable=None,
                leave=False,
                total=int(response.headers["content-length"]),
                unit_scale=True,
            ) as pb:
                data = []
                async for chunk in response.aiter_bytes():
                    data.extend(chunk)
                    pb.update(len(chunk))

                with open(image_path, "wb") as image_file:
                    image_file.write(bytes(data))
                    pb.write(f"downloaded {image_path}")

    await tqdm.gather(
        *[download_image(item) for item in image_urls],
        desc="downloading images",
        disable=None,
        leave=False
    )


def apply_wallpaper():
    import shutil
    import subprocess
    from datetime import datetime

    betterlockscreen = shutil.which("betterlockscreen")

    if len(os.listdir(WALLPAPER_DIR)) == 0:
        print("wallpaper directory is empty", file=sys.stderr)
        exit(1)
    elif betterlockscreen is None:
        print("betterlockscreen executable is not found in PATH", file=sys.stderr)
        exit(1)

    cmds = ["nice", "-n", "19", betterlockscreen, "--quiet", "--update"]

    now = datetime.now()
    if now.hour <= 6 or now.hour >= 18:
        cmds += [WALLPAPER_DIR]
        dim_wallpaper = True
    else:
        cmds += [os.path.join(WALLPAPER_DIR, "SFW")]
        dim_wallpaper = False

    cmds += ["--wall"]
    if dim_wallpaper:
        cmds += ["dim"]

    subprocess.Popen(cmds).wait()


match sys.argv[1]:
    case "apply":
        lockfile = os.path.join(
            os.path.dirname(__file__), os.path.basename(__file__) + ".apply.lock"
        )

        if not os.path.exists(lockfile):
            try:
                open(lockfile, "x").close()
                apply_wallpaper()
            finally:
                os.remove(lockfile)

    case "update":
        import asyncio

        asyncio.run(update_wallpaper())
